import { getClientEnv, getServerEnv } from "./env";

export function validateEnvOnStartup() {
  console.log("üîç Validando vari√°veis de ambiente...");

  try {
    const clientEnv = getClientEnv();
    console.log("‚úÖ Vari√°veis CLIENT validadas com sucesso");

    if (typeof window === "undefined") {
      const serverEnv = getServerEnv();
      console.log("‚úÖ Vari√°veis SERVER validadas com sucesso");

      if (!serverEnv.OPENAI_API_KEY) {
        console.warn(
          "‚ö†Ô∏è  OPENAI_API_KEY n√£o configurada - Features de IA estar√£o desabilitadas",
        );
      }

      if (serverEnv.NODE_ENV === "production") {
        if (serverEnv.NEXTAUTH_DEBUG === "true") {
          console.warn("‚ö†Ô∏è  NEXTAUTH_DEBUG est√° ativado em PRODU√á√ÉO!");
        }

        if (clientEnv.NEXT_PUBLIC_USE_FIREBASE_EMULATOR === "true") {
          console.error("‚ùå Firebase Emulator N√ÉO deve ser usado em PRODU√á√ÉO!");
          throw new Error("Configura√ß√£o inv√°lida para produ√ß√£o");
        }
      }
    }

    console.log("‚úÖ Todas as valida√ß√µes passaram!\n");
    return true;
  } catch (error) {
    console.error(
      "\n‚ùå ERRO CR√çTICO: Falha na valida√ß√£o de vari√°veis de ambiente\n",
    );

    if (error instanceof Error) {
      console.error(error.message);
    }

    console.error("\nüìñ Consulte CONFIGURATION.md para instru√ß√µes de setup\n");

    if (process.env.NODE_ENV === "production") {
      process.exit(1);
    }

    throw error;
  }
}

if (process.env.SKIP_ENV_VALIDATION !== "true") {
  validateEnvOnStartup();
}
